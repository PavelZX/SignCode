#!/usr/bin/env python3
import sys
import freetype
import string
import math
import os.path

CHARS = string.ascii_letters + string.digits + string.punctuation
CHAR_NUMS = [ord(x) for x in CHARS]

if len(sys.argv) != 3:
    print("Usage: {} [font file] [font size in pixels]".format(sys.argv[0]))
    exit()
else:
    _, face_name, size_pixels = sys.argv
    size_pixels = int(size_pixels)

face = freetype.Face(face_name)
face.set_pixel_sizes(0, size_pixels)

def get_character_as_bool_array(c):
    global face

    face.load_char(c, freetype.FT_LOAD_RENDER | freetype.FT_LOAD_TARGET_MONO)

    bitmap = face.glyph.bitmap

    result = []
    res2   = []
    for i in range(0, bitmap.rows * bitmap.pitch, bitmap.pitch):
        arr = []
        seen = []
        arr2 = []
        for j in range(bitmap.width):
            byte, bit = divmod(j, 8)
            bit = 7 - bit
            if byte not in seen:
                seen.append(byte)
                arr2.append(bitmap.buffer[i+byte])
            arr.append(bitmap.buffer[i+byte] & (1 << bit) != 0)
        result.append(arr)
        res2.append(arr2)
    
    return result, res2

def get_metrics(c):
    global face

    face.load_char(c, freetype.FT_LOAD_RENDER | freetype.FT_LOAD_TARGET_MONO)
    return [
            face.glyph.metrics.horiAdvance // 64,
            face.glyph.metrics.horiBearingX // 64,
            face.glyph.metrics.horiBearingY // 64
    ]

font_simple_name = os.path.splitext(os.path.basename(face_name))[0].replace("-", "_").replace(" ", "_").strip(string.digits + string.whitespace + "./\"'!@#$%^&*()[]{};,.").lower() + "_" + str(size_pixels)
header_name = "FONT_" + font_simple_name.upper() + "_H"

print(f"#ifndef {header_name}\n#define {header_name}")
print("#include <stdint.h>")
print()
print(f"namespace font::{font_simple_name} {{")
print(f"namespace {{")

metrics = {}

# generate the data arrays
for i in range(256):
    if i in CHAR_NUMS:
        img, dat = get_character_as_bool_array(chr(i))
        metrics[i] = len(img[0]), len(img), int(math.ceil(len(img[0]) / 8))
        print("const uint8_t data_{}[] = {{".format(i))
        zipped = [(", ".join(str(u) for u in x), "".join("#" if z else " " for z in y)) for x, y in zip(dat, img)]
        for i in zipped:
            print("\t{},{} // {}".format(i[0], "\t\t" * len(dat[0]), i[1]))
        print("};")
        print()

print("}")

print("const int16_t metrics[][6] = { // width, height, n_bytes, advance, bearingX, bearingY")
for i in range(256):
    if i not in metrics:
        print("\t{0, 0, 0, 0, 0, 0}, // no char here")
        continue
    j = list(metrics[i])
    j.extend(get_metrics(chr(i)))
    j = [str(x) for x in j]
    print("\t{{ {} }}, // {}  ".format(", ".join(j), chr(i) if chr(i) != "\\" else "backslash"))
print("};")

print("const uint8_t * data[] = {")
for i in range(256):
    if i not in metrics:
        print("\tnullptr,")
        continue
    print("\tdata_{},".format(i))

print("};")
print("}")
print()
print("// generated by fnter w/ {} {}".format(face_name, size_pixels))
print()
print("#endif")
